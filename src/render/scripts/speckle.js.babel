/* global $ */

function speckle (options = {
  count: {},
  react: {
    connect: {}
  }
}) {
  const canvas = $(options.canvas).get(0) || $('#speckle').get(0)
  const ctx = canvas.getContext('2d')
  const speckles = {
    color: options.color || '#422727',
    count: {
      nb: options.count.nb,
      dynamicMod: options.count.dynamicMod || 2,
      dynamicLimit: options.count.limit || true
    },
    react: {
      radius: options.react.radius || 200,
      connect: {
        distance: options.react.connect.distance || 100,
        color: options.react.connect.color || '66, 39, 39',
        width: options.react.connect.width || 0.1,
        opacity: options.react.connect.opacity
      }
    }
  }

  createSpeckles(canvas, ctx, speckles)
  detectMouse(speckles)
  detectResize(canvas, speckles)
}

function Speckle (radius, x, y, vx, vy) {
  this.radius = radius
  this.x = x
  this.y = y
  this.vx = vx
  this.vy = vy
}

Speckle.prototype.update = function (canvas, ctx, speckles = {}) {
  ctx.beginPath()
  ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)
  ctx.fillStyle = speckles.color
  ctx.fill()

  if (this.x < 0 || this.x > canvas.width) this.vx = -this.vx
  if (this.y < 0 || this.y > canvas.height) this.vy = -this.vy

  this.x += this.vx
  this.y += this.vy

  for (let i = 0; i < speckles.count.nb; i++) {
    const that = speckles.array[i]
    const location = Math.sqrt(Math.pow(this.x - speckles.react.X, 2) + Math.pow(this.y - speckles.react.Y, 2))
    const distance = Math.sqrt(Math.pow(this.x - that.x, 2) + Math.pow(this.y - that.y, 2))
    const connectOpacity = speckles.react.connect.opacity ? speckles.react.connect.opacity : 1 - (distance / speckles.react.connect.distance)

    if (location <= speckles.react.radius && distance <= speckles.react.connect.distance) {
      ctx.beginPath()
      ctx.moveTo(this.x, this.y)
      ctx.lineTo(that.x, that.y)
      ctx.strokeStyle = 'rgba(' + speckles.react.connect.color + ',' + connectOpacity + ')'
      ctx.lineWidth = speckles.react.connect.width
      ctx.stroke()
    }
  }
}

function createSpeckles (canvas, ctx, speckles = {}) {
  canvas.width = window.innerWidth
  canvas.height = window.innerHeight

  if (speckles.dynamicMod !== false && speckles.count.dynamicLimit === true && (speckles.count.dynamicMod < 0 || speckles.count.dynamicMod > 100)) speckles.count.dynamicMod = speckles.count.dynamicMod < 0 ? 1 : 100

  speckles.count.nb = speckles.count.dynamicMod !== false ? Math.round((canvas.width * canvas.height) * (speckles.count.dynamicMod / 10000)) : speckles.count.nb
  speckles.array = []

  for (let i = 0; i < speckles.count.nb; i++) {
    const radius = Math.random()
    const x = Math.random() * canvas.width
    const y = Math.random() * canvas.height
    const vx = -0.5 + Math.random()
    const vy = -0.5 + Math.random()

    speckles.current = new Speckle(radius, x, y, vx, vy)
    speckles.array.push(speckles.current)
  }

  if ($(canvas).hasClass('is-active')) {
    $(canvas).hide().fadeIn(2000)
  } else {
    $(canvas).addClass('is-active').fadeIn(2000)
    window.requestAnimationFrame(() => {
      drawSpeckles(canvas, ctx, speckles)
    })
  }
}

function drawSpeckles (canvas, ctx, speckles = {}) {
  ctx.clearRect(0, 0, canvas.width, canvas.height)

  for (let i = 0; i < speckles.count.nb; i++) {
    speckles.current = speckles.array[i]
    speckles.current.update(canvas, ctx, speckles)
  }

  window.requestAnimationFrame(() => {
    drawSpeckles(canvas, ctx, speckles)
  })
}

function detectMouse (speckles = {}) {
  $(window).mousemove(function (canvasPosition) {
    speckles.react.X = canvasPosition.pageX
    speckles.react.Y = canvasPosition.pageY - window.scrollY
  })
}

function detectResize (canvas, speckles = {}) {
  let documentWidth = $(document).width()
  let documentHeight = $(document).height()

  $(window).resize(function () {
    if (documentWidth !== $(document).width() || documentHeight !== $(document).height()) {
      documentWidth = $(document).width()
      documentHeight = $(document).height()
      createSpeckles(canvas, speckles)
    }
  })
}

export default speckle
