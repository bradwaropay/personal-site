// Fonts
$font: (
  family: (
    // Fallback to sans-serif instead of monospace to eliminate unnecessary CLS
    base: #{"Inconsolata", sans-serif}
  ),
  weight: (
    normal: 400,
    bold: 700
  )
);

@function getFont($category, $value) {
  @return map-get(map-get($font, $category), $value);
};

$baseFontSize: 16px;
$baseLineHeight: $baseSpacing;

// Base Typography
$baseTypography: (
  family: getFont(family, base),
  lineHeight: $baseLineHeight,
  size: $baseFontSize,
  weight: getFont(weight, normal),
);

@function getBaseTypography($baseVar) {
  @return map-get($baseTypography, $baseVar);
};

$heading: (
  sm: (
    base: 1.5rem,
    sm: 1.5rem,
    md: 1.5rem,
    lg: 1.5rem
  ),
  md: (
    base: 2rem,
    sm: 2rem,
    md: 3rem,
    lg: 3rem
  ),
  lg: (
    base: 3rem,
    sm: 3rem,
    md: 4rem,
    lg: 4rem
  )
);

@function getHeading($size, $breakpoint) {
  @return map-get(map-get($heading, $size), $breakpoint);
};

$text: (
  sm: (
    base: 1rem,
    sm: 1rem,
    md: 1rem,
    lg: 1rem
  ),
  md: (
    base: 1rem,
    sm: 1rem,
    md: 1.25rem,
    lg: 1.25rem
  ),
  lg: (
    base: 1.25rem,
    sm: 1.25rem,
    md: 1.5rem,
    lg: 1.5rem
  )
);

@function getText($size, $breakpoint) {
  @return map-get(map-get($text, $size), $breakpoint);
};

// Generate CSS variables
:root {
  // Headings
  @each $fontSizeName, $fontSize in $heading {
    --font-heading-#{$fontSizeName}: #{getHeading($fontSizeName, base)};
  };

  @each $breakpointName, $breakpointSize in $breakpoint {
    @media screen and (min-width: $breakpointSize) {
      @each $fontSizeName, $fontSize in $heading {
        --font-heading-#{$fontSizeName}: #{getHeading($fontSizeName, $breakpointName)};
      };
    }
  };

  // Text
  @each $fontSizeName, $fontSize in $text {
    --font-text-#{$fontSizeName}: #{getText($fontSizeName, base)};
  };

  @each $breakpointName, $breakpointSize in $breakpoint {
    @media screen and (min-width: $breakpointSize) {
      @each $fontSizeName, $fontSize in $text {
        --font-text-#{$fontSizeName}: #{getText($fontSizeName, $breakpointName)};
      };
    }
  };

  // Set page colors
  --page-color-text: var(--color-content-primary-100);
  --page-color-text-underline: var(--color-accent-primary-200);
  --page-color-link: var(--color-action-primary-200);
  --page-color-link-underline-hover: var(--color-accent-primary-200);
}

@mixin typographyReset {
  color: var(--page-color-text);
  font-family: getBaseTypography(family);
  font-size: getBaseTypography(size);
  font-weight: getBaseTypography(weight);
  line-height: getBaseTypography(lineHeight);
}

@mixin heading($size: md) {
  display: block;
  font-size: var(--font-heading-#{$size});
  text-decoration: underline var(--page-color-text-underline);

  &+* {
    margin-top: useSpacing(sm);
  }

  @if $size == "sm" {
    font-weight: getFont(weight, normal);
    line-height: 1.625;
  } @else {
    font-weight: getFont(weight, bold);
  }

  @if $size == "md" {
    line-height: 1.21875;

    @media screen and (min-width: useBreakpoint(md)) {
      line-height: 1.3541666;
    }
  }

  @if $size == "lg" {
    line-height: 1.1666;

    &+* {
      margin-top: useSpacing(md);
    }

    @media screen and (min-width: useBreakpoint(md)) {
      line-height: 1.3125;
    }
  }
}

@mixin text($size: md, $weight: normal) {
  font-size: var(--font-text-#{$size});
  font-weight: getFont(weight, $weight);
  line-height: 1.625;

  @if $size == "md" {
    @media screen and (min-width: useBreakpoint(md)) {
      line-height: 1.95;
    }
  }

  @if $size == "lg" {
    line-height: 1.95;

    @media screen and (min-width: useBreakpoint(md)) {
      line-height: 2.1666;
    }
  }
}

@mixin linkHover {
  text-decoration: wavy underline var(--page-color-link-underline-hover);
}

@mixin link {
  color: var(--page-color-link);
  text-decoration: wavy underline transparent;
  transition: text-decoration-color 0.2s linear;

  &:active,
  &:focus,
  &:hover {
    @include linkHover;
  }
}