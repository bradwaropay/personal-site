$layer: (
  base: 0,
  page: 100,
  overlay: 200
);

@function useLayer($zIndex) {
  @return map-get($layer, $zIndex);
};

$baseSpacing: 1.625rem;

$spacing: (
  xs: calc($baseSpacing / 4),
  sm: calc($baseSpacing / 2),
  md: calc($baseSpacing * 1),
  lg: calc($baseSpacing * 2),
  xl: calc($baseSpacing * 4),
  xxl: calc($baseSpacing * 6),
  xxxl: calc($baseSpacing * 8),
);

@function useSpacing($size) {
  @return map-get($spacing, $size);
};

$content: (
  container: (
    base: 40rem,
    sm: 40rem,
    md: 50rem,
    lg: 80rem,
  ),
  gutter: (
    base: 2rem,
    sm: 2rem,
    md: 2rem,
    lg: 4rem,
  )
);

@function getContent($param, $breakpoint) {
  @return map-get(map-get($content, $param), $breakpoint);
};

$breakpoint: (
  sm: #{getContent(container, sm) + (2 * getContent(gutter, sm))},
  md: #{getContent(container, md) + (2 * getContent(gutter, md))},
  lg: #{getContent(container, lg) + (2 * getContent(gutter, lg))},
);

@function useBreakpoint($size) {
  @return map-get($breakpoint, $size);
};


:root {
  --content-container: #{getContent(container, base)};
  --content-gutter: #{getContent(gutter, base)};

  @each $breakpointName, $breakpointSize in $breakpoint {
    @media screen and (min-width: $breakpointSize) {
      --content-container: #{getContent(container, $breakpointName)};
      --content-gutter: #{getContent(gutter, $breakpointName)};
    }
  };
}

@mixin content {
  margin: 0 auto;
  max-width: var(--content-container);
  padding-left: var(--content-gutter);
  padding-right: var(--content-gutter);
}

@mixin grid($rowGap: md, $columnGap: md) {
  display: grid;
  gap: useSpacing($rowGap) useSpacing($columnGap);
  grid-auto-rows: 1fr;
  grid-template-columns: repeat(4, 1fr);

  @media screen and (min-width: useBreakpoint(sm)) {
    grid-template-columns: repeat(6, 1fr);
  }

  @media screen and (min-width: useBreakpoint(md)) {
    grid-template-columns: repeat(8, 1fr);
  }

  @media screen and (min-width: useBreakpoint(lg)) {
    grid-template-columns: repeat(12, 1fr);
  }
}